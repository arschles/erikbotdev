package twitch

import (
	"encoding/json"
	"fmt"
	"os"
	"strings"

	"github.com/erikstmartin/erikbotdev/bot"
	"github.com/erikstmartin/erikbotdev/http"
	"github.com/gempir/go-twitch-irc/v2"
)

var client *twitch.Client

func init() {
	bot.RegisterModule(bot.Module{
		Name: "Twitch",
		Actions: map[string]bot.ActionFunc{
			"Say": sayAction,
		},
		Init: func(c bot.ModuleConfig) error {
			return nil
		},
	})
}

func sayAction(a bot.Action, cmd bot.UserCommand) error {
	// TODO: Do we even really want to supply a channel?
	if _, ok := a.Args["channel"]; !ok {
		return fmt.Errorf("Argument 'channel' is required.")
	}
	if _, ok := a.Args["message"]; !ok {
		return fmt.Errorf("Argument 'message' is required.")
	}
	client.Say(a.Args["channel"], a.Args["message"])
	return nil
}

func Run() error {
	client = twitch.NewClient(os.Getenv("TWITCH_CHANNEL"), os.Getenv("TWITCH_OAUTH_TOKEN"))

	client.OnConnect(func() {
		fmt.Println("Connected!")
		// TODO: Remove me when Alert feature is complete
		//b := []byte{123, 34, 85, 115, 101, 114, 34, 58, 123, 34, 73, 68, 34, 58, 34, 56, 49, 56, 52, 52, 53, 51, 51, 34, 44, 34, 78, 97, 109, 101, 34, 58, 34, 99, 108, 97, 114, 107, 105, 111, 34, 44, 34, 68, 105, 115, 112, 108, 97, 121, 78, 97, 109, 101, 34, 58, 34, 67, 108, 97, 114, 107, 105, 111, 34, 44, 34, 67, 111, 108, 111, 114, 34, 58, 34, 35, 69, 50, 50, 66, 52, 52, 34, 44, 34, 66, 97, 100, 103, 101, 115, 34, 58, 123, 34, 98, 105, 116, 115, 45, 108, 101, 97, 100, 101, 114, 34, 58, 50, 125, 125, 44, 34, 82, 97, 119, 34, 58, 34, 64, 98, 97, 100, 103, 101, 45, 105, 110, 102, 111, 61, 59, 98, 97, 100, 103, 101, 115, 61, 98, 105, 116, 115, 45, 108, 101, 97, 100, 101, 114, 47, 50, 59, 99, 111, 108, 111, 114, 61, 35, 69, 50, 50, 66, 52, 52, 59, 100, 105, 115, 112, 108, 97, 121, 45, 110, 97, 109, 101, 61, 67, 108, 97, 114, 107, 105, 111, 59, 101, 109, 111, 116, 101, 115, 61, 59, 102, 108, 97, 103, 115, 61, 59, 105, 100, 61, 49, 49, 101, 57, 97, 98, 56, 51, 45, 49, 52, 97, 102, 45, 52, 50, 99, 51, 45, 98, 57, 100, 54, 45, 99, 97, 52, 56, 48, 57, 98, 57, 99, 53, 51, 98, 59, 108, 111, 103, 105, 110, 61, 99, 108, 97, 114, 107, 105, 111, 59, 109, 111, 100, 61, 48, 59, 109, 115, 103, 45, 105, 100, 61, 114, 97, 105, 100, 59, 109, 115, 103, 45, 112, 97, 114, 97, 109, 45, 100, 105, 115, 112, 108, 97, 121, 78, 97, 109, 101, 61, 67, 108, 97, 114, 107, 105, 111, 59, 109, 115, 103, 45, 112, 97, 114, 97, 109, 45, 108, 111, 103, 105, 110, 61, 99, 108, 97, 114, 107, 105, 111, 59, 109, 115, 103, 45, 112, 97, 114, 97, 109, 45, 112, 114, 111, 102, 105, 108, 101, 73, 109, 97, 103, 101, 85, 82, 76, 61, 104, 116, 116, 112, 115, 58, 47, 47, 115, 116, 97, 116, 105, 99, 45, 99, 100, 110, 46, 106, 116, 118, 110, 119, 46, 110, 101, 116, 47, 106, 116, 118, 95, 117, 115, 101, 114, 95, 112, 105, 99, 116, 117, 114, 101, 115, 47, 48, 53, 52, 52, 54, 53, 57, 99, 45, 56, 100, 49, 56, 45, 52, 52, 100, 100, 45, 97, 101, 49, 98, 45, 98, 54, 53, 57, 53, 53, 51, 97, 52, 102, 102, 97, 45, 112, 114, 111, 102, 105, 108, 101, 95, 105, 109, 97, 103, 101, 45, 55, 48, 120, 55, 48, 46, 106, 112, 103, 59, 109, 115, 103, 45, 112, 97, 114, 97, 109, 45, 118, 105, 101, 119, 101, 114, 67, 111, 117, 110, 116, 61, 50, 55, 59, 114, 111, 111, 109, 45, 105, 100, 61, 49, 57, 50, 52, 57, 55, 50, 50, 49, 59, 115, 117, 98, 115, 99, 114, 105, 98, 101, 114, 61, 48, 59, 115, 121, 115, 116, 101, 109, 45, 109, 115, 103, 61, 50, 55, 92, 92, 115, 114, 97, 105, 100, 101, 114, 115, 92, 92, 115, 102, 114, 111, 109, 92, 92, 115, 67, 108, 97, 114, 107, 105, 111, 92, 92, 115, 104, 97, 118, 101, 92, 92, 115, 106, 111, 105, 110, 101, 100, 33, 59, 116, 109, 105, 45, 115, 101, 110, 116, 45, 116, 115, 61, 49, 53, 57, 54, 50, 50, 55, 57, 54, 51, 50, 53, 56, 59, 117, 115, 101, 114, 45, 105, 100, 61, 56, 49, 56, 52, 52, 53, 51, 51, 59, 117, 115, 101, 114, 45, 116, 121, 112, 101, 61, 32, 58, 116, 109, 105, 46, 116, 119, 105, 116, 99, 104, 46, 116, 118, 32, 85, 83, 69, 82, 78, 79, 84, 73, 67, 69, 32, 35, 101, 114, 105, 107, 100, 111, 116, 100, 101, 118, 34, 44, 34, 84, 121, 112, 101, 34, 58, 52, 44, 34, 82, 97, 119, 84, 121, 112, 101, 34, 58, 34, 85, 83, 69, 82, 78, 79, 84, 73, 67, 69, 34, 44, 34, 84, 97, 103, 115, 34, 58, 123, 34, 98, 97, 100, 103, 101, 45, 105, 110, 102, 111, 34, 58, 34, 34, 44, 34, 98, 97, 100, 103, 101, 115, 34, 58, 34, 98, 105, 116, 115, 45, 108, 101, 97, 100, 101, 114, 47, 50, 34, 44, 34, 99, 111, 108, 111, 114, 34, 58, 34, 35, 69, 50, 50, 66, 52, 52, 34, 44, 34, 100, 105, 115, 112, 108, 97, 121, 45, 110, 97, 109, 101, 34, 58, 34, 67, 108, 97, 114, 107, 105, 111, 34, 44, 34, 101, 109, 111, 116, 101, 115, 34, 58, 34, 34, 44, 34, 102, 108, 97, 103, 115, 34, 58, 34, 34, 44, 34, 105, 100, 34, 58, 34, 49, 49, 101, 57, 97, 98, 56, 51, 45, 49, 52, 97, 102, 45, 52, 50, 99, 51, 45, 98, 57, 100, 54, 45, 99, 97, 52, 56, 48, 57, 98, 57, 99, 53, 51, 98, 34, 44, 34, 108, 111, 103, 105, 110, 34, 58, 34, 99, 108, 97, 114, 107, 105, 111, 34, 44, 34, 109, 111, 100, 34, 58, 34, 48, 34, 44, 34, 109, 115, 103, 45, 105, 100, 34, 58, 34, 114, 97, 105, 100, 34, 44, 34, 109, 115, 103, 45, 112, 97, 114, 97, 109, 45, 100, 105, 115, 112, 108, 97, 121, 78, 97, 109, 101, 34, 58, 34, 67, 108, 97, 114, 107, 105, 111, 34, 44, 34, 109, 115, 103, 45, 112, 97, 114, 97, 109, 45, 108, 111, 103, 105, 110, 34, 58, 34, 99, 108, 97, 114, 107, 105, 111, 34, 44, 34, 109, 115, 103, 45, 112, 97, 114, 97, 109, 45, 112, 114, 111, 102, 105, 108, 101, 73, 109, 97, 103, 101, 85, 82, 76, 34, 58, 34, 104, 116, 116, 112, 115, 58, 47, 47, 115, 116, 97, 116, 105, 99, 45, 99, 100, 110, 46, 106, 116, 118, 110, 119, 46, 110, 101, 116, 47, 106, 116, 118, 95, 117, 115, 101, 114, 95, 112, 105, 99, 116, 117, 114, 101, 115, 47, 48, 53, 52, 52, 54, 53, 57, 99, 45, 56, 100, 49, 56, 45, 52, 52, 100, 100, 45, 97, 101, 49, 98, 45, 98, 54, 53, 57, 53, 53, 51, 97, 52, 102, 102, 97, 45, 112, 114, 111, 102, 105, 108, 101, 95, 105, 109, 97, 103, 101, 45, 55, 48, 120, 55, 48, 46, 106, 112, 103, 34, 44, 34, 109, 115, 103, 45, 112, 97, 114, 97, 109, 45, 118, 105, 101, 119, 101, 114, 67, 111, 117, 110, 116, 34, 58, 34, 50, 55, 34, 44, 34, 114, 111, 111, 109, 45, 105, 100, 34, 58, 34, 49, 57, 50, 52, 57, 55, 50, 50, 49, 34, 44, 34, 115, 117, 98, 115, 99, 114, 105, 98, 101, 114, 34, 58, 34, 48, 34, 44, 34, 115, 121, 115, 116, 101, 109, 45, 109, 115, 103, 34, 58, 34, 50, 55, 32, 114, 97, 105, 100, 101, 114, 115, 32, 102, 114, 111, 109, 32, 67, 108, 97, 114, 107, 105, 111, 32, 104, 97, 118, 101, 32, 106, 111, 105, 110, 101, 100, 33, 34, 44, 34, 116, 109, 105, 45, 115, 101, 110, 116, 45, 116, 115, 34, 58, 34, 49, 53, 57, 54, 50, 50, 55, 57, 54, 51, 50, 53, 56, 34, 44, 34, 117, 115, 101, 114, 45, 105, 100, 34, 58, 34, 56, 49, 56, 52, 52, 53, 51, 51, 34, 44, 34, 117, 115, 101, 114, 45, 116, 121, 112, 101, 34, 58, 34, 34, 125, 44, 34, 77, 101, 115, 115, 97, 103, 101, 34, 58, 34, 34, 44, 34, 67, 104, 97, 110, 110, 101, 108, 34, 58, 34, 101, 114, 105, 107, 100, 111, 116, 100, 101, 118, 34, 44, 34, 82, 111, 111, 109, 73, 68, 34, 58, 34, 49, 57, 50, 52, 57, 55, 50, 50, 49, 34, 44, 34, 73, 68, 34, 58, 34, 49, 49, 101, 57, 97, 98, 56, 51, 45, 49, 52, 97, 102, 45, 52, 50, 99, 51, 45, 98, 57, 100, 54, 45, 99, 97, 52, 56, 48, 57, 98, 57, 99, 53, 51, 98, 34, 44, 34, 84, 105, 109, 101, 34, 58, 34, 50, 48, 50, 48, 45, 48, 55, 45, 51, 49, 84, 49, 54, 58, 51, 57, 58, 50, 51, 46, 50, 53, 56, 45, 48, 52, 58, 48, 48, 34, 44, 34, 69, 109, 111, 116, 101, 115, 34, 58, 110, 117, 108, 108, 44, 34, 77, 115, 103, 73, 68, 34, 58, 34, 114, 97, 105, 100, 34, 44, 34, 77, 115, 103, 80, 97, 114, 97, 109, 115, 34, 58, 123, 34, 109, 115, 103, 45, 112, 97, 114, 97, 109, 45, 100, 105, 115, 112, 108, 97, 121, 78, 97, 109, 101, 34, 58, 34, 67, 108, 97, 114, 107, 105, 111, 34, 44, 34, 109, 115, 103, 45, 112, 97, 114, 97, 109, 45, 108, 111, 103, 105, 110, 34, 58, 34, 99, 108, 97, 114, 107, 105, 111, 34, 44, 34, 109, 115, 103, 45, 112, 97, 114, 97, 109, 45, 112, 114, 111, 102, 105, 108, 101, 73, 109, 97, 103, 101, 85, 82, 76, 34, 58, 34, 104, 116, 116, 112, 115, 58, 47, 47, 115, 116, 97, 116, 105, 99, 45, 99, 100, 110, 46, 106, 116, 118, 110, 119, 46, 110, 101, 116, 47, 106, 116, 118, 95, 117, 115, 101, 114, 95, 112, 105, 99, 116, 117, 114, 101, 115, 47, 48, 53, 52, 52, 54, 53, 57, 99, 45, 56, 100, 49, 56, 45, 52, 52, 100, 100, 45, 97, 101, 49, 98, 45, 98, 54, 53, 57, 53, 53, 51, 97, 52, 102, 102, 97, 45, 112, 114, 111, 102, 105, 108, 101, 95, 105, 109, 97, 103, 101, 45, 55, 48, 120, 55, 48, 46, 106, 112, 103, 34, 44, 34, 109, 115, 103, 45, 112, 97, 114, 97, 109, 45, 118, 105, 101, 119, 101, 114, 67, 111, 117, 110, 116, 34, 58, 34, 50, 55, 34, 125, 44, 34, 83, 121, 115, 116, 101, 109, 77, 115, 103, 34, 58, 34, 50, 55, 32, 114, 97, 105, 100, 101, 114, 115, 32, 102, 114, 111, 109, 32, 67, 108, 97, 114, 107, 105, 111, 32, 104, 97, 118, 101, 32, 106, 111, 105, 110, 101, 100, 33, 34, 125}
		//fmt.Println(string(b))
	})

	client.OnPrivateMessage(func(message twitch.PrivateMessage) {
		var u *bot.User
		var err error

		// TODO: Remove this!!!
		/*http.BroadcastMessage(&http.RaidMessage{
			UserName:     "arschles",
			PartySize:    8,
			ProfileImage: "https://static-cdn.jtvnw.net/jtv_user_pictures/a1b7efb4-d8f7-477b-970b-2530e991dc01-profile_image-70x70.png",
			Message:      "8 raiders from arschles have joined!",
		})*/

		u, err = bot.GetUser(message.User.ID)
		if err != nil {
			fmt.Println("Error retrieving user: ", err)
			return
		}

		u.DisplayName = message.User.DisplayName
		u.Color = message.User.Color
		u.Badges = message.User.Badges

		if u.New {
			u.ID = message.User.ID
			u.Points = 25000
		}

		err = u.Save()
		if err != nil {
			fmt.Println("Error saving user: ", err)
			return
		}

		if !strings.HasPrefix(message.Message, "!") || len(message.Message) <= 1 {
			u.GivePoints(1000)
			http.BroadcastChatMessage(u, message.Message)
			return
		}

		// TODO: Do we care what type of whitespace?
		parts := strings.Split(message.Message[1:], " ")
		cmdName := strings.ToLower(parts[0])
		cmd := bot.UserCommand{
			Channel:  message.Channel,
			UserID:   message.User.ID,
			UserName: message.User.DisplayName,
			Command:  cmdName,
			Args:     parts[1:],
		}
		err = bot.ExecuteCommand(cmd)
		if err != nil {
			fmt.Println("Error executing command: ", err)
		}
	})

	//TODO: Respond to Twitch events
	//https://dev.twitch.tv/docs/irc/tags#usernotice-twitch-tags

	client.OnUserNoticeMessage(func(message twitch.UserNoticeMessage) {
		b, _ := json.Marshal(message)
		fmt.Println("UserNoticeMessage", string(b))

		// TODO: bot.Trigger(fmt.Sprintf("twitch::%s", message.MsgID))

		// TODO: What channel did this happen in?
		// TODO: Send user-id

		switch message.MsgID {
		case "sub":
		case "resub":
		case "subgift":
		case "anonsubgift":
		case "submysterygift":
		case "giftpaidupgrade":
		case "rewardgift":
		case "anongiftpaidupgrade":
		case "raid":
		case "unraid":
		case "ritual":
		case "bitsbadgetier":
			// TODO: Where are the bits?
		}
	})

	// TODO: Get this from config
	client.Join(os.Getenv("TWITCH_CHANNEL"))

	return client.Connect()
}
